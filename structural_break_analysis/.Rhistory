robust = 1,   # Allow heterogeneity and autocorrelation
const = 1,     # Include intercept
printd = 1,
signif = 4
)
resultsSEQUA
fitted_values <- resultsSEQUA$fitted.values  # Extract fitted values
output_df <- data.frame(
Index = 1:nrow(df),  # Adding an index column
Scaled_Target = df[[CONFIG$target]],  # Actual values
Fitted_Values = fitted_values  # Estimated values
)
write.csv(output_df, "linear_fitted_values.csv", row.names = FALSE)
head(output_df)
plot_model(resultsSEQUA, CI = 0.95, title = NULL)
library(mbreaks)
library(dplyr)
library(zoo)
library(tidyr)
library(ggplot2)
#source("Procedures.R")
CONFIG <- list(
path = "../data/full_dataset.csv",
target = "Mean_freq",
covariates = c("Temp", "Wind", "Pressure", "Humidity", "Rainfall_rolling_mean", "Temp_rolling_mean")
)
df <- read.csv(CONFIG$path, check.names = FALSE)
df$Date <- as.POSIXct(df[[1]], format="%Y-%m-%d %H:%M:%S", tz="UTC")
df <- df[, -1]
df <- df %>%
mutate(
Temp_shifted = lag(Temp, 2),
Humidity_shifted = lag(Humidity, 13),
Rainfall_shifted = lag(Rainfall, 106),
Rainfall_rolling_mean = rollmean(Rainfall, 450, fill = NA, align = "right") + rnorm(n(), mean = 0, sd = 0.0001),
Temp_rolling_mean = rollmean(Temp, 150, fill = NA, align = "right")
)
df <- df %>% drop_na()
resultsSEQUA <- dosequa(
y_name = CONFIG$target,
z_name = c("Temp_shifted", "Wind", "Pressure", "Humidity_shifted"), #"Rainfall_rolling_mean", "Temp_rolling_mean"),
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
robust = 1,   # Allow heterogeneity and autocorrelation
const = 1,     # Include intercept
printd = 1,
signif = 4
)
resultsSEQUA
plot_model(resultsSEQUA, CI = 0.95, title = NULL)
fitted_values <- resultsSEQUA$fitted.values  # Extract fitted values
output_df <- data.frame(
Index = 1:nrow(df),  # Adding an index column
Scaled_Target = df[[CONFIG$target]],  # Actual values
Fitted_Values = fitted_values  # Estimated values
)
write.csv(output_df, "linear_fitted_values.csv", row.names = FALSE)
head(output_df)
library(mbreaks)
library(dplyr)
library(zoo)
library(tidyr)
library(ggplot2)
#source("Procedures.R")
CONFIG <- list(
path = "../data/full_dataset.csv",
target = "Mean_freq",
covariates = c("Temp", "Wind", "Pressure", "Humidity", "Rainfall_rolling_mean", "Temp_rolling_mean")
)
df <- read.csv(CONFIG$path, check.names = FALSE)
df$Date <- as.POSIXct(df[[1]], format="%Y-%m-%d %H:%M:%S", tz="UTC")
df <- df[, -1]
df <- df %>%
mutate(
Temp_shifted = lag(Temp, 2),
Humidity_shifted = lag(Humidity, 13),
Rainfall_shifted = lag(Rainfall, 106),
Rainfall_rolling_mean = rollmean(Rainfall, 450, fill = NA, align = "right") + rnorm(n(), mean = 0, sd = 0.0001),
Temp_rolling_mean = rollmean(Temp, 150, fill = NA, align = "right")
)
df <- df %>% drop_na()
resultsSEQUA <- dosequa(
y_name = CONFIG$target,
z_name = c("Temp_shifted", "Wind", "Pressure", "Humidity_shifted", "Rainfall_rolling_mean", "Temp_rolling_mean"),
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
robust = 1,   # Allow heterogeneity and autocorrelation
const = 1,     # Include intercept
printd = 1,
signif = 4
)
resultsSEQUA
plot_model(resultsSEQUA, CI = 0.95, title = NULL)
fitted_values <- resultsSEQUA$fitted.values  # Extract fitted values
output_df <- data.frame(
Index = 1:nrow(df),  # Adding an index column
Scaled_Target = df[[CONFIG$target]],  # Actual values
Fitted_Values = fitted_values  # Estimated values
)
write.csv(output_df, "linear_fitted_values.csv", row.names = FALSE)
head(output_df)
library(mbreaks)
library(dplyr)
library(zoo)
library(tidyr)
library(ggplot2)
#source("Procedures.R")
CONFIG <- list(
path = "../data/full_dataset.csv",
target = "Mean_freq",
covariates = c("Temp", "Wind", "Pressure", "Humidity", "Rainfall_rolling_mean", "Temp_rolling_mean")
)
df <- read.csv(CONFIG$path, check.names = FALSE)
df$Date <- as.POSIXct(df[[1]], format="%Y-%m-%d %H:%M:%S", tz="UTC")
df <- df[, -1]
print(length(df))
df <- df %>%
mutate(
Temp_shifted = lag(Temp, 2),
Humidity_shifted = lag(Humidity, 13),
Rainfall_shifted = lag(Rainfall, 106),
Rainfall_rolling_mean = rollmean(Rainfall, 450, fill = NA, align = "right") + rnorm(n(), mean = 0, sd = 0.0001),
Temp_rolling_mean = rollmean(Temp, 150, fill = NA, align = "right")
)
print(length(df))
df <- df %>% drop_na()
resultsSEQUA <- dosequa(
y_name = CONFIG$target,
z_name = c("Temp_shifted", "Wind", "Pressure", "Humidity_shifted", "Rainfall_rolling_mean", "Temp_rolling_mean"),
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
robust = 1,   # Allow heterogeneity and autocorrelation
const = 1,     # Include intercept
printd = 1,
signif = 4
)
library(mbreaks)
library(dplyr)
library(zoo)
library(tidyr)
library(ggplot2)
#source("Procedures.R")
CONFIG <- list(
path = "../data/full_dataset.csv",
target = "Mean_freq",
covariates = c("Temp", "Wind", "Pressure", "Humidity", "Rainfall_rolling_mean", "Temp_rolling_mean")
)
df <- read.csv(CONFIG$path, check.names = FALSE)
df$Date <- as.POSIXct(df[[1]], format="%Y-%m-%d %H:%M:%S", tz="UTC")
df <- df[, -1]
print(nrow(df))
df <- df %>%
mutate(
Temp_shifted = lag(Temp, 2),
Humidity_shifted = lag(Humidity, 13),
Rainfall_shifted = lag(Rainfall, 106),
Rainfall_rolling_mean = rollmean(Rainfall, 450, fill = NA, align = "right") + rnorm(n(), mean = 0, sd = 0.0001),
Temp_rolling_mean = rollmean(Temp, 150, fill = NA, align = "right")
)
df <- df %>% drop_na()
print(nrow(df))
resultsSEQUA <- dosequa(
y_name = CONFIG$target,
z_name = c("Temp_shifted", "Wind", "Pressure", "Humidity_shifted", "Rainfall_rolling_mean", "Temp_rolling_mean"),
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
robust = 1,   # Allow heterogeneity and autocorrelation
const = 1,     # Include intercept
printd = 1,
signif = 4
)
resultsSEQUA
plot_model(resultsSEQUA, CI = 0.95, title = NULL)
fitted_values <- resultsSEQUA$fitted.values  # Extract fitted values
output_df <- data.frame(
Index = 1:nrow(df),  # Adding an index column
Scaled_Target = df[[CONFIG$target]],  # Actual values
Fitted_Values = fitted_values  # Estimated values
)
write.csv(output_df, "linear_fitted_values.csv", row.names = FALSE)
head(output_df)
#install.packages("mbreaks")
library(mbreaks)
#source("Procedures.R")  # If it's in the working directory
TCN_path = "../transformed_data/TCN_last_layer.csv"
CONFIG <- list(
path = TCN_path,
target = "scaled_target"
)
df <- read.csv(CONFIG$path, header = TRUE)
# Define dependent and independent variables
y_name <- CONFIG$target  # Dependent variable
z_name <- colnames(df)[!colnames(df) %in% "scaled_target"]
df <- df[50:nrow(df),]
resultsSEQUA = dosequa(
y_name = y_name,
z_name = z_name,
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif = 4,
)
plot_model(resultsSEQUA, CI = 0.95, title = NULL)
print(resultsSEQUA)
fitted_values <- resultsSEQUA$fitted.values  # Extract fitted values
output_df <- data.frame(
Index = 1:nrow(df),  # Adding an index column
Scaled_Target = df[[y_name]],  # Actual values
Fitted_Values = fitted_values  # Estimated values
)
write.csv(output_df, "fitted_values.csv", row.names = FALSE)
head(output_df)
#earthquake
eq_indx = 8889
df_aftereq <- df[eq_indx:nrow(df),]
resultsSEQUA_aftereq = dosequa(
y_name = y_name,
z_name = z_name,
data = df_aftereq,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif = 4,
)
plot_model(resultsSEQUA_aftereq, CI = 0.95, title = NULL)
print(resultsSEQUA_aftereq)
fitted_values <- resultsSEQUA_aftereq$fitted.values  # Extract fitted values
output_df <- data.frame(
Index = 1:nrow(df_aftereq),  # Adding an index column
Scaled_Target = df_aftereq[[y_name]],  # Actual values
Fitted_Values = fitted_values  # Estimated values
)
write.csv(output_df, "fitted_values_after.csv", row.names = FALSE)
head(output_df)
#doprintplot(resultsSEQUA_aftereq, df_aftereq)
### now test recovering
# last piece before the earthquake vs last part of the timeseries
recovery_indx <- resultsSEQUA_aftereq$date[nrow(resultsSEQUA_aftereq$date)]+eq_indx
start_last_normal <- resultsSEQUA$date[3]
end_last_normal <- resultsSEQUA$date[4]
end_df <- df[recovery_indx:nrow(df),]
norm_df <- df[start_last_normal,end_last_normal]
df_recovery <- rbind(norm_df,end_df)
resultsSEQUA_RECOVERY = dosequa(
y_name = y_name,
z_name = z_name,
data = df_recovery,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif=4
)
print(resultsSEQUA_RECOVERY, df_recovery)
#resultsSEQUA_RECOVERY_MDL = mdl(
#  y_name = y_name,
#  z_name = z_name,
#  data = df_recovery,
#  eps1 = 0.05,  # Trimming (minimum segment length)
#)
#plot_model(resultsSEQUA_RECOVERY_MDL)
library(mbreaks)
library(dplyr)
library(zoo)
library(tidyr)
library(ggplot2)
source("Procedures.R")
CONFIG <- list(
path = "../data/full_dataset.csv",
target = "Mean_freq",
covariates = c("Temp", "Wind", "Pressure", "Humidity", "Rainfall_rolling_mean", "Temp_rolling_mean")
)
df <- read.csv(CONFIG$path, check.names = FALSE)
df$Date <- as.POSIXct(df[[1]], format="%Y-%m-%d %H:%M:%S", tz="UTC")
df <- df[, -1]
print(nrow(df))
df <- df %>%
mutate(
Temp_shifted = lag(Temp, 2),
Humidity_shifted = lag(Humidity, 13),
Rainfall_shifted = lag(Rainfall, 106),
Rainfall_rolling_mean = rollmean(Rainfall, 450, fill = NA, align = "right") + rnorm(n(), mean = 0, sd = 0.0001),
Temp_rolling_mean = rollmean(Temp, 150, fill = NA, align = "right")
)
df <- df %>% drop_na()
print(nrow(df))
resultsSEQUA <- mydosequa(
y_name = CONFIG$target,
z_name = c("Temp_shifted", "Wind", "Pressure", "Humidity_shifted", "Rainfall_rolling_mean", "Temp_rolling_mean"),
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
robust = 1,   # Allow heterogeneity and autocorrelation
const = 1,     # Include intercept
printd = 1,
signif = 4
)
resultsSEQUA
#install.packages("mbreaks")
library(mbreaks)
#source("Procedures.R")  # If it's in the working directory
TCN_path = "../transformed_data/TCN_last_layer.csv"
FFNN_path = "../transformed_data/TCN_last_layer.csv"
CONFIG <- list(
path = FFNN_path,
target = "scaled_target"
)
df <- read.csv(CONFIG$path, header = TRUE)
# Define dependent and independent variables
y_name <- CONFIG$target  # Dependent variable
z_name <- colnames(df)[!colnames(df) %in% "scaled_target"]
df <- df[50:nrow(df),]
resultsSEQUA = dosequa(
y_name = y_name,
z_name = z_name,
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif = 4,
)
#install.packages("mbreaks")
library(mbreaks)
#source("Procedures.R")  # If it's in the working directory
TCN_path = "../transformed_data/TCN_last_layer.csv"
FFNN_path = "../transformed_data/TCN_last_layer.csv"
CONFIG <- list(
path = FFNN_path,
target = "scaled_target"
)
df <- read.csv(CONFIG$path, header = TRUE)
# Define dependent and independent variables
y_name <- CONFIG$target  # Dependent variable
z_name <- colnames(df)[!colnames(df) %in% "scaled_target"]
df <- df[50:nrow(df),]
resultsSEQUA = dosequa(
y_name = y_name,
z_name = z_name,
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif = 4,
)
plot_model(resultsSEQUA, CI = 0.95, title = NULL)
#install.packages("mbreaks")
library(mbreaks)
#source("Procedures.R")  # If it's in the working directory
TCN_path = "../transformed_data/TCN_last_layer.csv"
FFNN_path = "../transformed_data/FFNN_last_layer.csv"
CONFIG <- list(
path = FFNN_path,
target = "scaled_target"
)
df <- read.csv(CONFIG$path, header = TRUE)
# Define dependent and independent variables
y_name <- CONFIG$target  # Dependent variable
z_name <- colnames(df)[!colnames(df) %in% "scaled_target"]
df <- df[50:nrow(df),]
resultsSEQUA = dosequa(
y_name = y_name,
z_name = z_name,
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif = 4,
)
#install.packages("mbreaks")
library(mbreaks)
TCN_path = "../transformed_data/TCN_last_layer.csv"
CONFIG <- list(
path = TCN_path,
target = "scaled_target"
)
df <- read.csv(CONFIG$path, header = TRUE)
# Define dependent and independent variables
y_name <- CONFIG$target  # Dependent variable
z_name <- colnames(df)[!colnames(df) %in% "scaled_target"]
resultsSEQUA = dosequa(
y_name = y_name,
z_name = z_name,
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif = 4,
)
plot_model(resultsSEQUA, CI = 0.95, title = NULL)
print(resultsSEQUA)
fitted_values <- resultsSEQUA$fitted.values  # Extract fitted values
output_df <- data.frame(
Index = 1:nrow(df),  # Adding an index column
Scaled_Target = df[[y_name]],  # Actual values
Fitted_Values = fitted_values  # Estimated values
)
write.csv(output_df, "fitted_values.csv", row.names = FALSE)
head(output_df)
#earthquake
eq_indx = 8889
df_aftereq <- df[eq_indx:nrow(df),]
resultsSEQUA_aftereq = dosequa(
y_name = y_name,
z_name = z_name,
data = df_aftereq,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif = 4,
)
plot_model(resultsSEQUA_aftereq, CI = 0.95, title = NULL)
print(resultsSEQUA_aftereq)
fitted_values <- resultsSEQUA_aftereq$fitted.values  # Extract fitted values
output_df <- data.frame(
Index = 1:nrow(df_aftereq),  # Adding an index column
Scaled_Target = df_aftereq[[y_name]],  # Actual values
Fitted_Values = fitted_values  # Estimated values
)
#write.csv(output_df, "fitted_values_after.csv", row.names = FALSE)
head(output_df)
#doprintplot(resultsSEQUA_aftereq, df_aftereq)
### now test recovering
# last piece before the earthquake vs last part of the timeseries
recovery_indx <- resultsSEQUA_aftereq$date[nrow(resultsSEQUA_aftereq$date)]+eq_indx
start_last_normal <- resultsSEQUA$date[3]
end_last_normal <- resultsSEQUA$date[4]
end_df <- df[recovery_indx:nrow(df),]
norm_df <- df[start_last_normal,end_last_normal]
df_recovery <- rbind(norm_df,end_df)
resultsSEQUA_RECOVERY = dosequa(
y_name = y_name,
z_name = z_name,
data = df_recovery,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif=4
)
print(resultsSEQUA_RECOVERY, df_recovery)
#resultsSEQUA_RECOVERY_MDL = mdl(
#  y_name = y_name,
#  z_name = z_name,
#  data = df_recovery,
#  eps1 = 0.05,  # Trimming (minimum segment length)
#)
#plot_model(resultsSEQUA_RECOVERY_MDL)
library(mbreaks)
library(dplyr)
library(zoo)
library(tidyr)
library(ggplot2)
CONFIG <- list(
path = "../data/full_dataset.csv",
target = "Mean_freq",
covariates = c("Temp", "Wind", "Pressure", "Humidity", "Rainfall_rolling_mean", "Temp_rolling_mean")
)
df <- read.csv(CONFIG$path, check.names = FALSE)
df$Date <- as.POSIXct(df[[1]], format="%Y-%m-%d %H:%M:%S", tz="UTC")
df <- df[, -1]
print(nrow(df))
df <- df %>%
mutate(
Temp_shifted = lag(Temp, 2),
Humidity_shifted = lag(Humidity, 13),
Rainfall_shifted = lag(Rainfall, 106),
Rainfall_rolling_mean = rollmean(Rainfall, 450, fill = NA, align = "right") + rnorm(n(), mean = 0, sd = 0.0001),
Temp_rolling_mean = rollmean(Temp, 150, fill = NA, align = "right")
)
df <- df %>% drop_na()
print(nrow(df))
resultsSEQUA <- dosequa(
y_name = CONFIG$target,
z_name = c("Temp_shifted", "Wind", "Pressure", "Humidity_shifted", "Rainfall_rolling_mean", "Temp_rolling_mean"),
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif = 4
)
resultsSEQUA
plot_model(resultsSEQUA, CI = 0.95, title = NULL)
head(output_df)
library(mbreaks)
library(dplyr)
library(zoo)
library(tidyr)
library(ggplot2)
CONFIG <- list(
path = "../data/full_dataset.csv",
target = "Mean_freq",
covariates = c("Temp", "Wind", "Pressure", "Humidity", "Rainfall_rolling_mean", "Temp_rolling_mean")
)
df <- read.csv(CONFIG$path, check.names = FALSE)
df$Date <- as.POSIXct(df[[1]], format="%Y-%m-%d %H:%M:%S", tz="UTC")
df <- df[, -1]
print(nrow(df))
df <- df %>%
mutate(
Temp_shifted = lag(Temp, 2),
Humidity_shifted = lag(Humidity, 13),
Rainfall_shifted = lag(Rainfall, 106),
Rainfall_rolling_mean = rollmean(Rainfall, 450, fill = NA, align = "right") + rnorm(n(), mean = 0, sd = 0.0001),
Temp_rolling_mean = rollmean(Temp, 150, fill = NA, align = "right")
)
df <- df %>% drop_na()
print(nrow(df))
resultsSEQUA <- dosequa(
y_name = CONFIG$target,
z_name = c("Temp_shifted", "Wind", "Pressure", "Humidity_shifted", "Rainfall_rolling_mean", "Temp_rolling_mean"),
data = df,
eps1 = 0.05,  # Trimming (minimum segment length)
m = 10,
signif = 4,
robust = 1,
)
resultsSEQUA
plot_model(resultsSEQUA, CI = 0.95, title = NULL)
head(output_df)
